# -*- coding: utf-8 -*-
"""SKS_DA_4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1giJzeqAfVw5b4ptamU_EW8GYGYlpMZug

# üìò **SAIKET SYSTEMS INTERNSHIP - TASK 4‚úÖ**
---
# ‚úÖ"PROJECT-CUSTOMER CHURN ANALYSIS AND PREDICTION"
---
**4.CHURN PREDICTION MODEL**
--
~BY AKASH. V

----

# üéØ **Task Description:**
# - Build a machine learning model to predict churn
# - Use logistic regression or similar algorithm
# - Evaluate using accuracy, precision, recall, and confusion matrix

# 1Ô∏è‚É£ Import Required Libraries
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, precision_score, recall_score
import seaborn as sns
import matplotlib.pyplot as plt

"""# 2Ô∏è‚É£ Load Cleaned Dataset"""

df = pd.read_csv("cleaned_churn_data.csv")

"""# 3Ô∏è‚É£ Define Features and Target"""

X = df.drop("Churn", axis=1)
y = df["Churn"]

"""# 4Ô∏è‚É£ Train-Test Split"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# 5Ô∏è‚É£ Build Logistic Regression Model"""

model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

"""# 6Ô∏è‚É£ Predictions"""

y_pred = model.predict(X_test)

"""# 7Ô∏è‚É£ Evaluation"""

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)

print("\n‚úÖ MODEL PERFORMANCE")
print("Accuracy:", round(accuracy, 3))
print("Precision:", round(precision, 3))
print("Recall:", round(recall, 3))
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

"""# 8Ô∏è‚É£ Confusion Matrix"""

cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6,4))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

"""# 9Ô∏è‚É£ Optional: Predict Churn Probabilities"""

probs = model.predict_proba(X_test)[:, 1]
df_results = pd.DataFrame({
    'Actual': y_test.values,
    'Predicted': y_pred,
    'Churn Probability': probs.round(3)
})
df_results.head()

"""# ü§ñ **Skills Gained:**
# - Machine learning (Logistic Regression)
# - Data splitting and preprocessing
# - Model evaluation and interpretation

### ‚úÖ **Conclusion ‚Äì Task 4: Churn Prediction Model**

In this task, we developed a churn prediction model using Logistic Regression to classify whether a customer is likely to churn. The model was trained and evaluated using accuracy, precision, recall, and a confusion matrix. Results showed that the model performs well in identifying churners with reasonable predictive accuracy.

This predictive capability is crucial for the business, enabling proactive retention strategies by focusing on customers who are most likely to leave.

**~AKASH. V - DATA ANALYSIS INTERN AT SAIKET SYSTEMS**
"""